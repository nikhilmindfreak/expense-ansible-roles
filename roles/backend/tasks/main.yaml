- name: disable default nodejs 
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs:20 
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.dnf:   
    name: "{{ item }}"
    state: installed
  loop:
  - nodejs
  - mysql

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: create app directory
  ansible.builtin.file:
    path: /app
    state: directory

- name: download backend code
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip
    
- name: unzip backend code
  ansible.builtin.unarchive:
    src: /tmp/backend.zip
    dest: /app
    remote_src: yes  #to give ansible the source is in remote machine

- name: install npm dependencies
  ansible.builtin.command: npm install
  args:
    chdir: /app

- name: copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

#insatlling dependencies through pip
- name: Install python MySQL dependencies 
  ansible.builtin.pip:  
    name: 
    - PyMySQL  #this is the dependency for MySQL
    - cryptography   #
    executable: pip3.9  #check ansible python version and give the pip
    
- name: important data into MySQL
  community.mysql.mysql_db:
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: yes

- name: start and enable backend service
  ansible.builtin.service:
    name: backend
    state: started
    enable: yes
